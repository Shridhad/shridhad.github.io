<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shridhar Deshmukh]]></title>
  <link href="http://Shridhad.github.io/atom.xml" rel="self"/>
  <link href="http://Shridhad.github.io/"/>
  <updated>2014-11-16T17:45:42+05:30</updated>
  <id>http://Shridhad.github.io/</id>
  <author>
    <name><![CDATA[Shridhar Deshmukh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML Imports]]></title>
    <link href="http://Shridhad.github.io/blog/2014/11/16/html-imports/"/>
    <updated>2014-11-16T14:01:31+05:30</updated>
    <id>http://Shridhad.github.io/blog/2014/11/16/html-imports</id>
    <content type="html"><![CDATA[<p>HTML Imports (or simply imports) is one of the piece from <a href="http://webcomponents.org/">Web Components</a> model, which allows you to load full external html document into your web page and that too without ajax. Imports provide convention for bundling HTML/CSS/JS into single deliverable component. Using imports you can create custom elements and then use them as new tags in your master document.</p>

<p> <!-- more --></p>

<blockquote><p>HTML Imports are a way to include and reuse HTML documents in other HTML documents.</p><footer><strong>HTML Imports -</strong> <cite><a href='http://www.w3.org/TR/html-imports/#abstract'>W3C Working Draft</a></cite></footer></blockquote>


<p>We will learn how to use HTML imports in projects, and also how we can use them with <code>&lt;template&gt;</code> to create dynamic web pages.</p>

<h2>Table of Content</h2>

<ol>
<li>The Lowdown</li>
<li>Using the Content</li>
<li>Imports and Templates</li>
<li>Browser Support</li>
</ol>


<br />


<h2>1. The Lowdown</h2>

<p>Include an import in your document using <code>&lt;link rel="import"&gt;</code>. Yes, it is a just link tag, with new value for <code>rel</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;path/to/import.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The referred url to imported document is an import location. For security reasons HTML imports adhere to <code>same-origin</code> policy. The import from another domain, the import location needs to be CORS set up correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Cross domain resources must be set up properly. --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;http://example.com/elements.html&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<br />


<h2>2. Using the content</h2>

<p>Importing external html doesn&rsquo;t pop the content of external document in the current document, it just fetches the content, parses it and makes it available for use.
You have to use the content by writing script, and you can access the content by examining the <code>import</code> property of corresponding link element.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span> <span class="s1">&#39;link[rel=&quot;import&quot;]&#39;</span> <span class="p">).</span><span class="kr">import</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now as you have imported the external document, you can grab a specific portion of imported document and clone it to your page. Here is a <a href="http://shridhad.github.io/html5demos/htmlImport/message.html">Demo</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span> <span class="s1">&#39;link[rel=&quot;import&quot;]&#39;</span> <span class="p">).</span><span class="kr">import</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span> <span class="s2">&quot;.warning&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">el</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Imports and Templates</h2>

<p>Now you understand how to import external document and access its content, now lets look at how you can use this technology with <code>&lt;template&gt;</code> element.</p>

<p>Let&rsquo;s say that we are building a todo app and want a component that displays a todo item with a small description. Let&rsquo;s create a template that is responsible for displaying a todo item. Store this template in separate HTML file &ndash; <code>template.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;todo-item-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;todo-item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>{{ title }}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;description&quot;</span><span class="nt">&gt;</span>{{ description }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/template&gt;</span> 
</span></code></pre></td></tr></table></div></figure>


<p>I am using <a href="underscorejs.org">underscore.js</a> for templating. Also I have changed the interpolate setting using <code>_.templateSettings</code>.</p>

<p>Next we need to import this template into our main document &ndash; <code>index.html</code>. Just add an <code>&lt;link&gt;</code> tag with <code>rel="import"</code>  attribute and href pointing to <code>template.html</code>. Lets also add and <code>id</code> attribute to tag this element that will help us to reference the element using JavaScript.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;template.html&quot;</span> <span class="na">id=</span><span class="s">&quot;import-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now is the time write some script and stamp out the todo template.</p>

<p>First of all, get the import link element and then use <code>import</code> property on that element to access the content of imported document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">templatesImport</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span> <span class="s2">&quot;#import-template&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">importContent</span> <span class="o">=</span> <span class="nx">templatesImport</span><span class="p">.</span><span class="kr">import</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next find the template element and then access the content that we need to clone, i.e. <code>.todo-item</code> element.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">importContent</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span> <span class="s2">&quot;#todo-item-template&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todoItem</span> <span class="o">=</span> <span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span> <span class="s2">&quot;.todo-item&quot;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s use underscore.js to compile our template with JSON and then append the newly create dom element into main document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Todo Title&quot;</span><span class="p">,</span> <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Todo Description&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_template</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span> <span class="nx">content</span><span class="p">.</span><span class="nx">outerHTML</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_dom</span> <span class="o">=</span> <span class="nx">_template</span><span class="p">(</span> <span class="nx">json</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todoItems</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span> <span class="s2">&quot;#todo-items&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">todoItems</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">_dom</span><span class="p">.</span><span class="nx">toDOM</span><span class="p">()</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_template</code> is function that underscore return after compiling html template. <code>_dom</code> is actual html snippet that we will render in main document. <a href="https://gist.github.com/Shridhad/822e629e952c9af8c8af"><code>_toDOM</code></a> is function on String which converts the string into dom element so that you can append it as child.
Here is <a href="http://shridhad.github.io/html5demos/htmlImport/">Demo</a>.</p>

<p data-height="339" data-theme-id="6499" data-slug-hash="dPygYx" data-default-tab="result" data-user="shree33" class='codepen'>See the Pen <a href='http://codepen.io/shree33/pen/dPygYx/'>HTML Imports</a> by Shridhar Deshmukh (<a href='http://codepen.io/shree33'>@shree33</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://Shridhad.github.io//assets.codepen.io/assets/embed/ei.js"></script>


<p>That&rsquo;s it! You got your first todo item and now you also know how to use HTML imports and template together to create dynamic pages.</p>

<h2>4. Browser Support</h2>

<p>Browser support is still in the early days. Before using the feature, you can check to see if the user&rsquo;s browser supports HTML imports by looking for the <code>import</code> property on <code>&lt;link&gt;</code> element.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">supportsImports</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;import&#39;</span> <span class="k">in</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;link&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="nx">supportsImports</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Good to go!</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Use other libraries/require systems to load files.</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also keep checking <a href="http://caniuse.com/#feat=imports">caniuse.com</a> for browser support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is `this`?]]></title>
    <link href="http://Shridhad.github.io/blog/2014/06/27/what-is-this/"/>
    <updated>2014-06-27T08:27:26+05:30</updated>
    <id>http://Shridhad.github.io/blog/2014/06/27/what-is-this</id>
    <content type="html"><![CDATA[<p>The most powerful keyword in JavaScript is <code>this</code> and many people get tripped by it. People expect it to work like <code>this</code> in Java, but understand that JavaScript is not Java.
Unfortunately understanding behavior of <code>this</code> is little harder if you are new to JavaScript, but certainly its not a magic. And as you start getting to used to <code>this</code>, its rule are actually very simple.</p>

<!-- more -->




<blockquote><p>The &#8216;this&#8217; keyword evaluates to the value of the &#8216;ThisBinding&#8217; of the current execution context.</p><footer><strong>11.1.1 The this keyword -</strong> <cite><a href='http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.1'>ECMAScript Language Specification</a></cite></footer></blockquote>


<p>The <code>this</code> value depends on the caller and the type of code being executed and is determined when control enters the execution context. The <code>this</code> value associated with an execution context is immutable.
And an execution context is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context that is actually executing code.</p>

<p class="no-margin">So lets understand how <code>this</code> works in following different contexts-</p>


<ol>
<li>Global Context</li>
<li>Function Context</li>
<li>Constructor Context</li>
<li>A DOM Event Handler</li>
</ol>


<br />


<h2>1. Global Context</h2>

<p>All JavaScript runtimes have a unique object called the <code>global object</code>. In browsers, the global object is the <code>window</code> object. When the JavaScript interpreter initially executes code, it first enters into a global execution context by default and <code>this</code> refers to global object which is window.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="s2">&quot;global&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot; context -&gt;        &quot;</span> <span class="o">+</span> <span class="nx">context</span><span class="p">);</span>          <span class="c1">// context -&gt; global</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot; window.context -&gt; &quot;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">context</span><span class="p">);</span>   <span class="c1">// window.context -&gt; global</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot; this == window -&gt; &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">this</span><span class="o">===</span><span class="nb">window</span><span class="p">));</span>  <span class="c1">// this == window -&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. Function Context</h2>

<p>Whenever you call a function the execution context changes and the new execution context depends on how you invoked the function.</p>

<ul>
<li>If you invoke the function using <code>Function.call()</code> or <code>Function.apply()</code>, <code>this</code> will be set to the first argument passed to <code>.call()/.apply()</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">printContext</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;context -&gt; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">printContext</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>    <span class="c1">// context -&gt; [object Window]</span>
</span><span class='line'>    <span class="nx">printContext</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">&quot;123&quot;</span><span class="p">);</span>     <span class="c1">// context -&gt; 123</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">printContext</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>   <span class="c1">// context -&gt; [object Window]</span>
</span><span class='line'>    <span class="nx">printContext</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="s2">&quot;123&quot;</span><span class="p">);</span>    <span class="c1">// context -&gt; 123</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//this line-</span>
</span><span class='line'>    <span class="nx">printContext</span><span class="p">();</span>               <span class="c1">// context -&gt; [object Window]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//desugars to this -</span>
</span><span class='line'>    <span class="nx">printContext</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>    <span class="c1">// context -&gt; [object Window]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait, I didn&rsquo;t use <code>.call()</code> at <em>line 12</em> then how the context is <code>window</code>. Basically whenever you make bare function call i.e. without <code>.call()/.apply()</code> as above <em>printContext()</em>, JavaScript will convert the call statement to <em>printContext.call(null)</em>.
If the first argument passed to <code>.call()/.apply()</code> is <em>null</em> or <em>undefined</em>, <code>this</code> will refer to <code>window</code>. But the catch here is if you are in <code>strict mode</code> then the value of <code>this</code> will be whatever its set to while entering into execution context, if not defined it will remain undefined.</p>

<ul>
<li>If you create function using <code>Function.bind()</code>, <code>this</code> will be bound the first argument that was passed to <code>.bind()</code>. In this approach however you make call to the function doesn&rsquo;t change value of <code>this</code>. Calling <code>printContext.bind()</code> creates a new function with same body and scope, but <code>this</code> is permanently bound to first argument of <code>bind</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">printContext</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;context -&gt; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">print</span> <span class="o">=</span> <span class="nx">printContext</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;bind&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">print</span><span class="p">();</span>                <span class="c1">// context -&gt; bind</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>        <span class="c1">// context -&gt; bind</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If you invoke the function as a method of an object, <code>this</code> will refer to that object. But you can still change it to some different object using <code>.call()/.apply()</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Object&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">greet</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span>                <span class="c1">// Hello Object</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;window&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">greet</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>     <span class="c1">// Hello window</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//this line-</span>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span>                <span class="c1">// Hello Object</span>
</span><span class='line'>    <span class="c1">//desugars to this-</span>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">greet</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>        <span class="c1">// Hello Object</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Constructor Context</h2>

<p>When constructing a new object via <code>new</code> operator, JavaScript interpreter creates new empty object, set some properties on it and then call the constructor function on that new object. Thus, in this context the value <code>this</code> is the new object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">NewObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">context</span> <span class="o">=</span> <span class="s2">&quot;NewObject&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NewObject</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;context -&gt; &quot;</span> <span class="o">+</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">context</span><span class="p">);</span>      <span class="c1">// context -&gt; NewObject</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. A DOM Event Handler</h2>

<p>Consider the following example, here the value of <code>this</code> in the function <code>handler</code> refers to the button you clicked on. You can observe the same in result tab.</p>

<p data-height="268" data-theme-id="6499" data-slug-hash="jbkig" data-default-tab="js" class='codepen'>See the Pen <a href='http://codepen.io/shree33/pen/jbkig/'>this in DOM Event Handler</a> by Shridhar Deshmukh (<a href='http://codepen.io/shree33'>@shree33</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://Shridhad.github.io//codepen.io/assets/embed/ei.js"></script>


<p>When you click on the button, the <code>handler</code> is invoked as method of the button, so <code>this</code> refers to the target element. How that happens is here, when you say <code>$("button").click(handler)</code>, there will be a new copy of <code>handler</code> created and bound to the button using <code>.bind()</code>. This is done by <code>attachEvent/addEventLister</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="c1">//this is</span>
</span><span class='line'>   <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">//equivalent to</span>
</span><span class='line'>   <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">handler</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>   <span class="c1">// this here is particular button</span>
</span><span class='line'>   <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>That&rsquo;s it! If you understand and follow above rules, you will always know what <code>this</code> is.</p>

<table class="this">
  <thead>
    <tr>
      <td> Context </td>
      <td> Non Strict mode </td>
      <td> Strict mode </td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> Global Context </td>
      <td> window </td>
      <td> window </td>
    </tr>
    <tr>
      <td> .call()/.apply() </td>
      <td> First Argument / window </td>
      <td> First Argument / undefined </td>
    </tr>
    <tr>
      <td> .bind() </td>
      <td> First Argument </td>
      <td> First Argument </td>
    </tr>
    <tr>
      <td> function() </td>
      <td> window </td>
      <td> undefined </td>
    </tr>
    <tr>
      <td> object.function() </td>
      <td> object </td>
      <td> object </td>
    </tr>
    <tr>
      <td> Constructor Context </td>
      <td> New Object </td>
      <td> New Object </td>
    </tr>
    <tr>
      <td> DOM Event Handler </td>
      <td> The HTML Element </td>
      <td> The HTML Element </td>
    </tr>
  </tbody>
</table>


<h2>Codepens</h2>

<ul>
<li><a href="http://codepen.io/shree33/pen/bKeBE">Global Context</a></li>
<li><a href="http://codepen.io/shree33/pen/ajcEC">this in call/apply</a></li>
<li><a href="http://codepen.io/shree33/pen/bCeLA">this with bind</a></li>
<li><a href="http://codepen.io/shree33/pen/lgDcu">this in object method</a></li>
<li><a href="http://codepen.io/shree33/pen/AhEis">Constructor Context</a></li>
<li><a href="http://codepen.io/shree33/pen/jbkig">A DOM Event Handler</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jJsonViewer - jQuery Plugin]]></title>
    <link href="http://Shridhad.github.io/blog/2014/02/15/jjsonviewer-jquery-plugin/"/>
    <updated>2014-02-15T18:40:08+05:30</updated>
    <id>http://Shridhad.github.io/blog/2014/02/15/jjsonviewer-jquery-plugin</id>
    <content type="html"><![CDATA[<p><link href="http://shridhad.github.io/jjsonviewer/css/jjsonviewer.css" rel="stylesheet" type="text/css">
<a href="https://github.com/Shridhad/jjsonviewer">View on Github</a></p>

<p><code>jJsonViewer</code> is a jquery plugin which you can call on any jquery element. This function takes <code>JSON</code> or <code>stringified JSON</code> as input which will be converted into html and added into given element.</p>

<!-- more -->


<h2>How to use &ndash;</h2>

<ul>
<li>Just download jJsonViewer plugin. You only need javascript and stylesheet.</li>
<li>Include both in your html page.</li>
<li>Now call jJsonViewer on any element and pass it a json data <code>$(element).jJsonViewer(json)</code></li>
</ul>


<h3>Demo &ndash;</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">jjson</span> <span class="o">=</span> <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">        &quot;name&quot;: &quot;jJsonViewer&quot;,</span>
</span><span class='line'><span class="s1">        &quot;author&quot;: {</span>
</span><span class='line'><span class="s1">            &quot;name&quot;: &quot;Shridhar Deshmukh&quot;,</span>
</span><span class='line'><span class="s1">            &quot;email&quot;: &quot;shridhar.deshmukh3@gmail.com&quot;,</span>
</span><span class='line'><span class="s1">            &quot;contact&quot;: [</span>
</span><span class='line'><span class="s1">                {</span>
</span><span class='line'><span class="s1">                    &quot;location&quot;: &quot;office&quot;,</span>
</span><span class='line'><span class="s1">                    &quot;number&quot;: 123456</span>
</span><span class='line'><span class="s1">                },</span>
</span><span class='line'><span class="s1">                {</span>
</span><span class='line'><span class="s1">                    &quot;location&quot;: &quot;home&quot;,</span>
</span><span class='line'><span class="s1">                    &quot;number&quot;: 987654</span>
</span><span class='line'><span class="s1">                }</span>
</span><span class='line'><span class="s1">            ]</span>
</span><span class='line'><span class="s1">        }</span>
</span><span class='line'><span class="s1">    }&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#jjson&quot;</span><span class="p">).</span><span class="nx">jJsonViewer</span><span class="p">(</span><span class="nx">jjson</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Output-</em></p>

<p>Enjoy collapsing and expanding over each JSON object and array. :)</p>

<div id="jjson"></div>




<script type="text/javascript" src="http://shridhad.github.io/jjsonviewer/js/jjsonviewer.js"></script>


<script type="text/javascript">
        $(document).ready(function() {
            var jjson = '{ "name": "jJsonViewer","author": { "name": "Shridhar Deshmukh", "email": "shridhar.deshmukh3@gmail.com", "contact": [{"location": "office", "number": 123456}, {"location": "home", "number": 987654}] } }';

            $("#jjson").jJsonViewer(jjson);
        });
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Repeating event.preventDefault()]]></title>
    <link href="http://Shridhad.github.io/blog/2014/01/12/stop-repeating-event-dot-preventdefault/"/>
    <updated>2014-01-12T10:29:02+05:30</updated>
    <id>http://Shridhad.github.io/blog/2014/01/12/stop-repeating-event-dot-preventdefault</id>
    <content type="html"><![CDATA[<p>If you end up repeating <code>event.preventDefault();</code>  in all/most of your event handlers, then you can stop yourself by using decorator over your actual event handlers.</p>

<!-- more -->


<p>Here is an example &ndash;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">defaultPreventer</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">handler</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">clickHandler</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//..do something</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#link&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">defaultPreventer</span><span class="p">(</span><span class="nx">clickHandler</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What <code>defaultPreventer</code> does here is, it returns the a decorator function for your actual event handler function <code>clickHandler</code>. Whenever the event is triggered, this decorator function gets called, and it executes <code>event.preventDefault();</code> before executing actual event handler <code>clickHandler</code>.</p>

<p>Here is working example on <a href="http://jsfiddle.net/shree33/PNRs3/">JsFiddle</a>.</p>
]]></content>
  </entry>
  
</feed>
